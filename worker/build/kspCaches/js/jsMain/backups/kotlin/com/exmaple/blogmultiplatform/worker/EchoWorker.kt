package com.exmaple.blogmultiplatform.worker

import com.varabyte.kobweb.worker.Transferables
import com.varabyte.kobweb.worker.WorkerContext
import org.w3c.dom.Worker
import kotlin.js.Json
import kotlin.js.json

class EchoWorker(override var onOutput: WorkerContext.(output: kotlin.String) -> Unit = {}) :
    com.varabyte.kobweb.worker.Worker<kotlin.String, kotlin.String> {

    private val ioSerializer = com.exmaple.blogmultiplatform.worker.EchoWorkerFactory().createIOSerializer()

    private val worker = Worker("_kobweb/workers/com-exmaple-blogmultiplatform-worker/worker-c7fc.js").apply {
        onmessage = { e ->
            val json = e.data.unsafeCast<Json>()
            val outputDeserialized = try {
                ioSerializer.deserializeOutput(json["_output"] as String)
            } catch (e: Throwable) {
                console.warn(buildString {
                    append("Unable to deserialize output generated by worker, ignoring it.")
                    e.message?.let { append("\nException: $it") }
                })
                null
            }
            if (outputDeserialized != null) {
                val ctx = WorkerContext(Transferables.fromJson(json))
                ctx.onOutput(outputDeserialized)
            }
        }
    }

    override fun postInput(input: kotlin.String, transferables: Transferables) {
        val inputSerialized = try {
            ioSerializer.serializeInput(input)
        } catch (e: Throwable) {
            null
        }
        if (inputSerialized != null) {
            worker.postMessage(
                json("_input" to inputSerialized).add(transferables.toJson()),
                transferables.toValues()
            )
        }
    }

    override fun terminate() {
        worker.terminate()
    }
}